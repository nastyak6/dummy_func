pipeline {
    agent any
    parameters {
        choice(name: 'ACTION', choices: ['backup', 'retrieve'], description: 'Select the action to perform')
        string(name: 'SAMBA_IP', defaultValue: '172.20.0.2', description: 'IP Address of the Samba Server')
        string(name: 'JENKINS_DATA_PATH', defaultValue: '/var/jenkins_home/data', description: 'only needed for retrive')
        string(name: 'DATA_PATH', defaultValue: '/path/to/local/data', description: 'Local Path to Data to Backup')
        string(name: 'SAMBA_SHARE', defaultValue: 'shared', description: 'Name of the Samba Share')
        string(name: 'SAMBA_USER', defaultValue: 'admin', description: 'Username for Samba Access')
        string(name: 'SAMBA_PASS', defaultValue: 'admin', description: 'Password for Samba Access')
    }
    environment {
        // Define environment variables
        JENKINS_DATA_PATH = "${params.JENKINS_DATA_PATH}"
        ACTION = "${params.ACTION}"
        SAMBA_IP = "${params.SAMBA_IP}"
        DATA_PATH = "${params.DATA_PATH}"
        SAMBA_SHARE = "${params.SAMBA_SHARE}"
        SAMBA_USER = "${params.SAMBA_USER}"
        SAMBA_PASS = "${params.SAMBA_PASS}"
    }
    stages {
        stage('Checkout Code') {
                steps {
                    checkout scm
                }
            }
          stage('Install smbclient') {
                steps {
                    sh '''
                    apt update
                    apt install smbclient -y
                    '''
                }
            }
            stage('Backup Data') {
                when {
                    expression {
                        params.ACTION == 'backup'
                    }
                }
                steps {
                    script {
                        sh '''
                        TIMESTAMP=$(date +%Y%m%d%H%M%S)
                        smbclient //$SAMBA_IP/$SAMBA_SHARE -U $SAMBA_USER%${SAMBA_PASS} -c "mkdir backup_$TIMESTAMP;cd backup_${TIMESTAMP};lcd $DATA_PATH ;prompt; recurse; mput *; exit;" 
                        '''
                    }
                }
            }
            stage('Revert Data') {
                when {
                    expression {
                        params.ACTION == 'retrieve'
                    }
                }
                steps {
                    script {
                        
                        sh '''
                        smbclient //$SAMBA_IP/$SAMBA_SHARE -U $SAMBA_USER%$SAMBA_PASS -c "ls" | grep backup_ | sort -r | head -n 1 | awk '{print $1}' > latest_backup.txt
                        LATEST_BACKUP=$(cat latest_backup.txt)
                        mkdir -p $JENKINS_DATA_PATH/$LATEST_BACKUP
                        smbclient //$SAMBA_IP/$SAMBA_SHARE -U $SAMBA_USER%$SAMBA_PASS -c"cd $LATEST_BACKUP; lcd $JENKINS_DATA_PATH/$LATEST_BACKUP;prompt; recurse; mget *; exit"
                        '''
                       
                    }
                }
            }
        }
    post {
        always {
            echo 'Pipeline Completed'
        }
    }
}
